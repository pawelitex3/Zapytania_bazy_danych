ZAJĘCIA 6.11.2018 BAZY DANYCH - ĆWICZENIA 5

Zapytania do bazy danych USOS

____________________________________________

1. Wyświetlić imię, nazwisko studenta oraz grupę zajęć do której chodzą na zajęcia Bazy danych.

SELECT s.imie, s.nazwisko, g.numer
FROM studenci s inner join zaliczenia z on (s.id_studenta=z.id_studenta) inner join grupy g on (z.id_grupy=g.id_grupy) inner join przedmioty p on (g.id_przedmiotu=p.id_przedmiotu)
WHERE p.nazwa LIKE 'Bazy danych';

____________________________________________

2. Informacje o tym kto studiuje razem z Janem Kowalskim i w której grupie.

____________________________________________
Z PODZAPYTANIEM

SELECT s.imie, s.nazwisko, g.numer, g.id_grupy
FROM studenci s JOIN zaliczenia z ON (s.id_studenta=z.id_studenta) 
                JOIN grupy g ON (z.id_grupy=g.id_grupy)
WHERE g.id_grupy IN (
                     SELECT g.id_grupy
                     FROM studenci s JOIN zaliczenia z ON (s.id_studenta=z.id_studenta)
                                     JOIN grupy g ON (z.id_grupy=g.id_grupy)
                     WHERE s.imie = 'Jan' AND s.nazwisko = 'Kowalski'
                     )
      AND NOT s.imie = 'Jan'
      AND NOT s.nazwisko = 'Kowalski';
      
____________________________________________
      
BEZ PODZAPYTANIA

SELECT s.imie, s.nazwisko, g.numer, g.id_grupy
FROM studenci s JOIN zaliczenia z ON (s.id_studenta=z.id_studenta) 
                JOIN grupy g ON (z.id_grupy=g.id_grupy),
     studenci jk JOIN zaliczenia zal ON (jk.id_studenta=zal.id_studenta) 
                 JOIN grupy gr ON (zal.id_grupy=gr.id_grupy)
WHERE jk.imie = 'Jan'
      AND jk.nazwisko = 'Kowalski'
      AND g.id_grupy = gr.id_grupy
      AND not s.imie = 'Jan'
      AND not s.nazwisko = 'Kowalski';
      
    
____________________________________________
            
3. Wyświetlić średnie ocen studentów

SELECT s.imie, s.nazwisko, ROUND(AVG(z.ocena), 2) AS "Średnia ocen"
FROM studenci s JOIN zaliczenia z ON (s.id_studenta=z.id_studenta)
WHERE z.ocena NOT IN (0, 1)
GROUP BY s.id_studenta, s.imie, s.nazwisko
ORDER BY s.id_studenta;

____________________________________________

4. Wyświetlić studentów z najwyższą średnią

____________________________________________
BEZ WITH

SELECT
    s.imie,
    s.nazwisko,
    round(AVG(z.ocena), 2)
FROM
    studenci s
    JOIN zaliczenia z ON ( s.id_studenta = z.id_studenta )
WHERE
    z.ocena NOT IN (
        0,
        1
    )
GROUP BY
    s.id_studenta,
    s.imie,
    s.nazwisko
HAVING
    round(AVG(z.ocena), 2) = (
        SELECT
            MAX(x.srednia)
        FROM
            (
                SELECT
                    round(AVG(zal.ocena), 2) as srednia
                FROM
                    studenci st
                    JOIN zaliczenia zal ON ( st.id_studenta = zal.id_studenta )
                GROUP BY
                    st.id_studenta
            ) x
    )
ORDER BY
    round(AVG(z.ocena), 2) DESC,
    s.id_studenta;
  
____________________________________________

CREATE VIEW srednia AS
    ( SELECT
        imie,
        nazwisko,
        round(AVG(z.ocena), 2) AS sr
    FROM
        studenci s
        JOIN zaliczenia z ON ( s.id_studenta = z.id_studenta )
    WHERE z.ocena NOT IN (0,1)
    GROUP BY
        s.imie,
        s.nazwisko,
        s.id_studenta
    );

SELECT
    s.imie,
    s.nazwisko
FROM
    srednia s
WHERE
    s.sr = 
( SELECT
    MAX(sr)
FROM
    srednia
);

____________________________________________

5. Stworzyć trzy widoki:

a) średnia - id_studenta, średnia

CREATE VIEW srednia AS
    ( SELECT
        s.id_studenta,
        s.imie,
        s.nazwisko,
        round(AVG(z.ocena), 3) AS sr
    FROM
        studenci s
        JOIN zaliczenia z ON ( s.id_studenta = z.id_studenta )
    WHERE
        z.ocena NOT IN (
            1,
            0
        )
    GROUP BY
        s.id_studenta,
        s.imie,
        s.nazwisko
    );
    
____________________________________________
    
b) zajęcia - id_studenta, imię, nazwisko, nazwa grupy, nazwa przedmiotu (na który chodzą, czyli na taki gdzie nie mają jeszcze oceny)

CREATE VIEW zajecia AS
    ( SELECT
        s.id_studenta,
        s.imie,
        s.nazwisko,
        g.id_grupy,
        g.numer,
        p.nazwa
    FROM
        studenci s
        JOIN zaliczenia z ON ( s.id_studenta = z.id_studenta )
        JOIN grupy g ON ( z.id_grupy = g.id_grupy )
        JOIN przedmioty p ON ( g.id_przedmiotu = p.id_przedmiotu )
    WHERE
        z.ocena IS NULL
    );
    
____________________________________________

c) student(ci) z najwyższą średnią

CREATE VIEW najwyzsza_srednia AS
    ( SELECT
        s.id_studenta,
        s.imie,
        s.nazwisko,
        s.sr
    FROM
        srednia s
    WHERE
        s.sr = (
            SELECT
                MAX(sr)
            FROM
                srednia
        )
    );
____________________________________________

6. Napisać trigger, który sprawdzi czy po wstawieniu oceny jest ona z zakredu od 2 do 5

CREATE OR REPLACE TRIGGER sprawdz_ocene BEFORE
    UPDATE ON zaliczenia
    FOR EACH ROW
BEGIN
    if(:new.ocena <2 or :new.ocena >5) then
        dbms_output.put_line('zla ocena ');
        raise_application_error(-20000, 'Zla ocena!');
    else
        dbms_output.put_line('Stara ocena: ' || :old.ocena);
        dbms_output.put_line('Nowa ocena: ' || :new.ocena);
    end if;
END;
____________________________________________

7. Napisać trigger, który będzie wprowadzał historię zmian oceny do tabeli historia zmian

CREATE OR REPLACE TRIGGER wpis_do_historii
    BEFORE UPDATE ON zaliczenia
    FOR EACH ROW
BEGIN
    if(:new.ocena <2 or :new.ocena >5) then
        dbms_output.put_line('zla ocena ');
        raise_application_error(-20000, 'Zla ocena!');
    else
        if(:new.ocena != :old.ocena) then
            insert into historia_zmian_oceny values(USER, :new.id_zaliczenia, :old.ocena, :new.ocena);
        end if;
    end if;
END;

CREATE TABLE historia_zmian_oceny
(
    user_name VARCHAR(40),
    id_zaliczenia INT,
    stara_ocena INT,
    nowa_ocena INT
);
____________________________________________

8. Stworzyć tabele sprzedawcy (10 rekordów) i sprzedaż (15 rekordów). W sprzedawcach każdy sprzedawca ma id swojego szefa. "Drzewko" ma mieć co najmniej 3 poziomy.

CREATE TABLE sprzedawcy (
    id_sprzedawcy   INT PRIMARY KEY,
    imie            VARCHAR(30),
    nazwisko        VARCHAR(30),
    id_szefa        INT
);

CREATE TABLE sprzedaz (
    id_sprzedazy    INT PRIMARY KEY,
    produkt         VARCHAR(50),
    id_sprzedawcy   INT,
    cena            DOUBLE PRECISION,
    data_sprzedazy  DATE    
);

____________________________________________

INSERTY DO POWYŻSZEJ TABELI

INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('1', 'Proszek do prania', '1', '20', TO_DATE('2018-11-01 09:00:10', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('2', 'Nożyczki', '1', '3', TO_DATE('2018-11-02 09:00:36', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('3', 'Monitor', '2', '600', TO_DATE('2018-11-03 09:00:43', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('4', 'Klepsydra', '3', '30', TO_DATE('2018-11-04 09:00:50', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('5', 'Zegar', '4', '35', TO_DATE('2018-11-05 09:00:56', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('6', 'Klawiatura', '5', '130', TO_DATE('2018-11-06 09:01:01', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('7', 'Biurko', '5', '400', TO_DATE('2018-11-07 09:01:07', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('8', 'Woda mineralna', '6', '1', TO_DATE('2018-11-08 09:01:11', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('9', 'Farba czerwona', '6', '40', TO_DATE('2018-11-09 09:01:16', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('10', 'Chusteczki', '7', '3', TO_DATE('2018-11-10 09:01:21', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('11', 'Telewizor', '7', '1700', TO_DATE('2018-12-01 09:01:26', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('12', 'Zeszyt w kratkę', '8', '2', TO_DATE('2018-12-02 09:01:30', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('13', 'Diamenty', '9', '5000', TO_DATE('2018-12-03 09:01:34', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('14', 'Rubiny', '10', '4000', TO_DATE('2018-12-04 09:01:38', 'YYYY-MM-DD HH24:MI:SS'))
INSERT INTO "SPRZEDAZ" (ID_SPRZEDAZY, PRODUKT, ID_SPRZEDAWCY, CENA, DATA_SPRZEDAZY) VALUES ('15', 'Szafiry', '10', '3000', TO_DATE('2018-12-05 09:01:41', 'YYYY-MM-DD HH24:MI:SS'))
____________________________________________

9. Wypisać zespół Juliusza Cezara

WITH zespol (id_sprzedawcy, imie, nazwisko, id_szefa) AS
    (
    SELECT id_sprzedawcy, imie, nazwisko, id_szefa
    FROM sprzedawcy
    WHERE
        imie='Juliusz' AND nazwisko='Cezar'
UNION ALL
SELECT
   s.id_sprzedawcy,
   s.imie,
   s.nazwisko,
   s.id_szefa
FROM
    zespol z inner join sprzedawcy s on z.id_sprzedawcy=s.id_szefa
)
SELECT
    *
FROM
    zespol; 
____________________________________________
10. Wypisać sprzedaż zespołu Jana Kowalskiego z miesiąca listopad

WITH zespol (id_sprzedawcy, imie, nazwisko, id_szefa) AS
    (
    SELECT id_sprzedawcy, imie, nazwisko, id_szefa
    FROM sprzedawcy
    WHERE imie='Jan' AND nazwisko='Kowalski'
UNION ALL
SELECT s.id_sprzedawcy, s.imie, s.nazwisko, s.id_szefa
FROM zespol z inner join sprzedawcy s on z.id_sprzedawcy=s.id_szefa
)
SELECT sum(cena) as suma_sprzedazy
FROM zespol inner join sprzedaz on (sprzedaz.id_sprzedawcy=zespol.id_sprzedawcy)
WHERE EXTRACT(month FROM data_sprzedazy)=11;
    
